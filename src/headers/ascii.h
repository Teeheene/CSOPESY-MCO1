void printLetter(std::string letter[36][8], char c){
	int val = int(c);
	val = val-97;
	for(int i=0; i<8; i++) {
		std::cout << letter[val][i] << std::endl;
	}
}

void printLetters(std::string s){	
	//9x8 width x height modified ascii to be monospace. 
	//Retrieved from https://patorjk.com/software/taag/ with Epic font
	std::string letter[52][8]= {
		{
			"         ",
			"         ",
			"         ",
			"         ",
			"         ",
			"         ",
			"         ",
			"         "
		},
		{
			" _ ",
			"( )",
			"| |",
			"| |",
			"| |",
			"(_)",
			" _ ",
			"(_)"
		},
		{
			" _  _ ",
			"( )( )",
			" \\||/ ",
			"      ",
			"      ",
			"      ",
			"      ",
			"      "
		},		
		{
			"   _   _   ",
			"  ( ) ( )  ",
			" _| |_| |_ ",
			"(_   _   _)",
			" _| (_) |_ ",
			"(_   _   _)",
			"  | | | |  ",
			"  (_) (_)  "
		},
		{
			"    _    ",
			" __|_|___",
			"(  _____/",
			"| (|_|__ ",
			"(_____  )",
			"/\\_|_|) |",
			"\\_______)",
			"   |_|   "
		},
		{
			"       ",
			"     /\\",
			"()  / /",
			"   / / ",
			"  / /  ",
			" / /   ",
			"/ /  ()",
			"\\/     "
		},
		{
			"   __   ",
			"  /__\\  ",
			" ( \\/ ) ",
			"  \\  /  ",
			"  /  \\/\\",
			" / /\\  /",
			"(  \\/  \\",
			" \\___/\\/"
		},
		{
			" _ ",
			"( )",
			"|/ ",
			"   ",
			"   ",
			"   ",
			"   ",
			"   "
		},
		{
			"   _ ",
			"  / )",
			" / / ",
			"( (  ",
			"| |  ",
			"( (  ",
			" \\ \\ ",
			"  \\_)"
		},

		{
			" _   ",
			"( \\  ",
			" \\ \\ ",
			"  ) )",
			"  | |",
			"  ) )",
			" / / ",
			"(_/  "
		},
		{
			"          ",
			" /\\    /\\ ",
			" \\ \\  / / ",
			" _) () (_ ",
			"(_      _)",
			"  ) () (  ",
			" / /  \\ \\ ",
			" \\/    \\/ "
		},

		{
			"    _    ",
			"   ( )   ",
			"   | |   ",
			" __| |__ ",
			"(__   __)",
			"   | |   ",
			"   | |   ",
			"   (_)   "
		},
		{
			"   ",
			"   ",
			"   ",
			"   ",
			"   ",
			" _ ",
			"( )",
			"|/ "
		},
		{
			"       ",
			"       ",
			"       ",
			" _____ ",
			"(_____)",
			"       ",
			"       ",
			"       "
		},

		{
			"   ",
			"   ",
			"   ",
			"   ",
			"   ",
			" _ ",
			"(_)"
		},
		{
			"       ",
			"     /\\",
			"    / /",
			"   / / ",
			"  / /  ",
			" / /   ",
			"/ /    ",
			"\\/     "
		},
		{
			" _______ ",
			"(  __   )",
			"| (  )  |",
			"| | /   |",
			"| (/ /) |",
			"|   / | |",
			"|  (__) |",
			"(_______)"
         	
		},
		{
			"  __     ",
			" /  \\    ",
			" \\/) )   ",
			"   | |   ",
			"   | |   ",
			"   | |   ",
			" __) (_  ",
			" \\____/  "
		},
		{
			" _______ ",
			"/ ___   )",
			"\\/   )  |",
			"    /   )",
			"  _/   / ",
			" /   _/  ",
			"(   (__/\\",
			"\\_______/",
         
		},
		{
			" ______  ",
			"/ ___  \\ ",
			"\\/   \\  \\",
			"   ___) /",
			"  (___ ( ",
			"     ) \\ ",
			"/\\___/  /",
			"\\______/ "
		},
		{
			"    ___  ",
			"   /   ) ", 
			"  / /) | ",
			" / (_) ( ",
			"(___    )",
			"    ) (  ",
			"    | |  ",
			"    (_)  ",
		},
		{
			" _______ ",
			"(  ____ \\",
			"| (    \\/",
			"| (____  ",
			"(_____ \\ ",
			"      ) )",
			"/\\____) )",
			"\\______/ "
		},
		{
			"  ______ ",
			" / ____ \\",
			"( (    \\/",
			"| (____  ",
			"|  ___ \\ ",
			"| (   ) )",
			"( (___) )",
			" \\_____/ "
		},
		{
			" ______  ",
			"/ ___  \\ ",
			"\\/   )  )",
			"    /  / ",
			"   /  /  ",
			"  /  /   ",
			" /  /    ",
			" \\_/     "
		},
		{
			"  _____  ",
			" / ___ \\ ",
			"( (___) )",
			" \\     / ",
			" / ___ \\ ",
			"( (   ) )",
			"( (___) )",
			" \\_____/ "
		},
		{
			"  _____  ",
			" / ___ \\ ",
			"( (   ) )",
			"( (___) |",
			" \\____  |",
			"      ) |",
			"/\\____) )",
			"\\______/ "
		},
		{
			" ______  ",
			"(  ___  )",
			"| (   ) |",
			"| (___) |",
			"|  ___  |",
			"| (   ) |",
			"| )   ( |",
			"|/     \\|"
		},
		{
			" ______  ",
			"(  ___ \\ ",
			"| (   ) )",
			"| (__/ / ",
			"|  __ (  ",
			"| (  \\ \\ ",
			"| )___) )",
			"|/ \\___/ "
		},
		{
			" _______ ",
			"(  ____ \\",
			"| (    \\/",
			"| |      ",
			"| |      ",
			"| |      ",
			"| (____/\\",
			"(_______/"
		},
		{
			" ______  ",
			"(  __  \\ ",
			"| (  \\  )",
			"| |   ) |",
			"| |   | |",
			"| |   ) |",
			"| (__/  )",
			"(______/ "
		},
		{
			" _______ ",
			"(  ____ \\",
			"| (    \\/",
			"| (__    ",
			"|  __)   ",
			"| (      ",
			"| (____/\\",
			"(_______/"
		},
		{
			" _______ ",
			"(  ____ \\",
			"| (    \\/",
			"| (__    ",
			"|  __)   ",
			"| (      ",
			"| )      ",
			"|/       "
		},
		{
			" _______ ",
			"(  ____ \\",
			"| (    \\/",
			"| |      ",
			"| | ____ ",
			"| | \\_  )",
			"| (___) |",
			"(_______)" 
		},
		{
			"         ",
			"|\\     /|",
			"| )   ( |",
			"| (___) |",
			"|  ___  |",
			"| (   ) |",
			"| )   ( |",
			"|/     \\|"
		},
		{
			"_________",
			"\\__   __/",
			"   ) (   ",
			"   | |   ",
			"   | |   ",
			"   | |   ",
			"___) (___",
			"\\_______/"
		},
		{
			"_________",
			"\\__    _/",
			"   )  (  ",
			"   |  |  ",
			"   |  |  ",
			"   |  |  ",
			"|\\_)  )  ",
			"(____/   "
		},
		{
			" _       ",
			"| \\    /\\",
			"|  \\  / /",
			"|  (_/ / ",
			"|   _ (  ",
			"|  ( \\ \\ ",
			"|  /  \\ \\",
			"|_/    \\/"
		},
		{
			" _       ",
			"( \\      ",
			"| (      ",
			"| |      ",
			"| |      ",
			"| |      ",
			"| (____/\\",
			"(_______/"
		},
		{
			" _______ ",
			"(       )",
			"| () () |",
			"| || || |",
			"| |(_)| |",
			"| |   | |",
			"| )   ( |",
			"|/     \\|",
		},
		{
			" _       ",
			"( (    /|",
			"|  \\  ( |",
			"|   \\ | |",
			"| (\\ \\) |",
			"| | \\   |",
			"| )  \\  |",
			"|/    )_)"
		},
		{
			" _______ ",
			"(  ___  )",
			"| (   ) |",
			"| |   | |",
			"| |   | |",
			"| |   | |",
			"| (___) |",
			"(_______)"
		},
		{
			" _______ ",
			"(  ____ )",
			"| (    )|",
			"| (____)|",
			"|  _____)",
			"| (      ",
			"| )      ",
			"|/       "
		},
		{
			" _______ ",
			"(  ___  )",
			"| (   ) |",
			"| |   | |",
			"| |   | |",
			"| | /\\| |",
			"| (_\\ \\ |",
			"(____\\/_)"
		},
		{
			" _______ ",
			"(  ____ )",
			"| (    )|",
			"| (____)|",
			"|     __)",
			"| (\\ (   ",
			"| ) \\ \\__",
			"|/   \\__/"
		},
		{
			" _______ ",
			"(  ____ \\",
			"| (    \\/",
			"| (_____ ",
			"(_____  )",
			"      ) |",
			"/\\____) |",
			"\\_______)"
		},
		{
			"_________",
			"\\__   __/",
			"   ) (   ",
			"   | |   ",
			"   | |   ",
			"   | |   ",
			"   | |   ",
			"   )_(   "
		},
		{
			"         ",
			"|\\     /|",
			"| )   ( |",
			"| |   | |",
			"| |   | |",
			"| |   | |",
			"| (___) |",
			"(_______)"
		},
		{
			"         ",
			"|\\     /|",
			"| )   ( |",
			"| |   | |",
			"( (   ) )",
			" \\ \\_/ / ",
			"  \\   /  ",
			"   \\_/   "
		},
		{
			"         ",
			"|\\     /|",
			"| )   ( |",
			"| | _ | |",
			"| |( )| |",
			"| || || |",
			"| () () |",
			"(_______)"
		},
		{
			"         ",
			"|\\     /|",
			"( \\   / )",
			" \\ (_) / ",
			"  ) _ (  ",
			" / ( ) \\ ",
			"( /   \\ )",
			"|/     \\|"
		},
		{
			"         ",
			"|\\     /|",
			"( \\   / )",
			" \\ (_) / ",
			"  \\   /  ",
			"   ) (   ",
			"   | |   ",
			"   \\_/   ",
		},
		{
			" _______ ",
			"/ ___   )",
			"\\/   )  |",
			"    /   )",
			"   /   / ",
			"  /   /  ",
			" /   (_/\\",
			"(_______/"
		}
	};
	//accept input for CLI window size? 
	//(ex. type "aaaaaaaaaaaa" until line break to determine ascii art maximum size)
	//idk about animation yet
	//to compile: g++ -std=c++11 marquee.cpp -o marquee.exe
	
	int vals[s.length()];
	std::string word[8];
	
	//char		ascii		index
	//space-/ 	32-47		0-16
	//0-9			48-57		17-26
	//A-Z			65-90		27-42
	//a-z			97-122	27-42 (no change)
	
	for(auto i=0u; i<s.length(); i++) {
		if(s[i] >= ' ' && s[i] <= '/') {
			vals[i] = s[i] - 32;
		}
		if(s[i] >= '0' && s[i] <= '9') {
			vals[i] = s[i] - 48 + 16;
		}
		if(s[i] >= 'A' && s[i] <= 'Z') {
			vals[i] = s[i] - 'A' + 26;
		}
		if(s[i] >= 'a' && s[i] <= 'z') {
			vals[i] = s[i] - 'a' + 26;
		}
		if(s[i] < ' ' || s[i] > 'z') {
			vals[i] = 0;
		}
	}
	
	for(int i=0; i<8; i++) {
		for(auto j=0u; j<s.length(); j++) {
			word[i].append(letter[vals[j]][i]);
			word[i].append(" ");
		}
	}
	
	for(int i=0; i<8; i++) {
		std::cout << word[i] << std::endl;
	}	
}


